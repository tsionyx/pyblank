# tox (https://tox.readthedocs.io/) is a tool for running tests
# in multiple virtualenvs. This configuration file will run the
# test suite on all supported python versions. To use it, "pip install tox --user"
# and then run "tox" from this directory.

# This tox.ini can be used to run on a various projects type.
# The most common scenarios are listed below:
# - the basic style and behaviour tests:  "tox"
# - slightly more expanded:               "PROJ=src_folder tox"
# - test specific version only:           "tox -e py35"
# - linter:                               "tox -e lint src_folder" or "PROJ=src_folder tox -e lint"
# - linter without colors (e.g. for CI):  "tox -e lint src_folder -- --output-format=text"

[tox]
# add pypy, pypy3 to the list optionally
envlist = sh, py27, py35
# prevent doing "setup.py develop"
# use "pip install -rrequirements.txt" instead (see further)
skipsdist = True


[testenv]
# https://github.com/tox-dev/tox/issues/601
whitelist_externals = /bin/true
list_dependencies_command = true

deps =
    -rrequirements.txt
    coverage
    flake8
    pytest

commands =
    ;{envpython} {toxinidir}/setup.py develop
    {envpython} -m compileall -q {env:PROJ:} tests
    {envbindir}/flake8
    # no need to run erase expicilty as "coverage run"
    # without '-a' option truncate it anyway
    ;{envbindir}/coverage erase

    {envbindir}/coverage run {envbindir}/pytest {posargs}
    # use "xdg-open htmlcov/index.html" to view report
    - {envbindir}/coverage html
    {envbindir}/coverage report

# for github's Travis CI to work
passenv = TRAVIS TRAVIS_*


# run bash dependent style tests
[testenv:sh]
whitelist_externals =
    /bin/true
    /bin/bash
deps =

commands =
    # update pre-push hook to run tox itself on pushing to origin
    bash -c "d={toxinidir}/.git/hooks; f=$d/pre-push; if [ -d $d ] && [ ! -e $f ]; then echo -e \
        '#!/bin/bash\nif [ $\{1\}x == originx ]; then tox; fi' > $f && chmod +x $f; fi"
    # style fixer
    bash -e {toxinidir}/.fix.sh --unicode


[testenv:lint]
deps =
    -rrequirements.txt
    pylint
commands =
    # add the --disable=R0205 (useless-object-inheritance) optionally
    # (inheritance from object still useful when using Python2)
    {envbindir}/pylint --output-format=colorized  {posargs:{env:PROJ:} }


###################################################
# Here comes configuration sections for other tools
# like flake8 or coverage

[coverage:run]
branch = True
omit = .tox/*
       setup.py
       */distutils/*.py

[coverage:report]
ignore_errors = True
skip_covered = True
fail_under = 95
exclude_lines =
    # Don't complain if tests don't hit defensive assertion code:
    raise NotImplementedError
    raise AssertionError

    # Have to re-enable the standard pragma
    pragma: no cover

    # Don't complain if tests run only on another Python version
    sys.version_info <
    sys.version_info >
    # http://astrofrog.github.io/blog/2016/01/12/stop-writing-python-4-incompatible-code/
    PY2

    # Don't complain if pytest is skipped
    pytest.mark.skip

[flake8]
max_line_length = 100
exclude =
    .git
    .tox
    .eggs
    build

# E402: module level import not at top of file
# E722: do not use bare except, specify exception instead
# more here https://pycodestyle.readthedocs.io/en/latest/intro.html#error-codes
;ignore=E402,E722

# By default flake8 ignores some of the errors. Force to check all of them
ignore =


[pytest]
log_format = [%(asctime)s] %(levelname)-8s %(filename)s(%(threadName)s):%(lineno)d -> %(message)s
log_level = INFO
addopts =
    --exitfirst
    --verbose
    # show extra summary on failed tests
    -rf
    --failed-first
